{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:block",
  "title": "Combobox",
  "description": "A searchable dropdown component that allows selecting from a list of items with keyboard navigation and filtering capabilities",
  "dependencies": [
    "combobox",
    "popover"
  ],
  "files": [
    {
      "path": "registry/block/combobox/combobox.tsx",
      "content": "import { ChevronsUpDown } from \"lucide-react\";\nimport { useMemo, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport type PersistableEntity = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  disabledAt?: Date | null | undefined;\n  extra?: Record<string, string> | null | undefined;\n};\n\n/* DEFAULT VALUES FOR EXAMPLE PURPOSES */\ninterface MockOption extends PersistableEntity {\n  name: string;\n  description: string;\n}\n\nconst defaultOptions: MockOption[] = [\n  {\n    id: \"1\",\n    name: \"Option 1\",\n    description: \"This is the first option\",\n    createdAt: new Date(\"2024-01-01\"),\n    updatedAt: new Date(\"2024-01-01\"),\n  },\n  {\n    id: \"2\",\n    name: \"Option 2\",\n    description: \"This is the second option\",\n    createdAt: new Date(\"2024-01-02\"),\n    updatedAt: new Date(\"2024-01-02\"),\n  },\n  {\n    id: \"3\",\n    name: \"Option 3\",\n    description: \"This is the third option\",\n    createdAt: new Date(\"2024-01-03\"),\n    updatedAt: new Date(\"2024-01-03\"),\n  },\n  {\n    id: \"4\",\n    name: \"Option 4\",\n    description: \"This is the fourth option\",\n    createdAt: new Date(\"2024-01-04\"),\n    updatedAt: new Date(\"2024-01-04\"),\n  },\n];\n\n/* END DEFAULT VALUES FOR EXAMPLE PURPOSES */\ninterface Props<T extends PersistableEntity> {\n  /** The options to display in the combobox */\n  options?: T[];\n  /** The key to use as the display value from the options object */\n  dataKey?: keyof T;\n  /** The currently selected value */\n  value?: string;\n  /** The default value to display in the combobox */\n  defaultValue?: string;\n  /** Whether the combobox is disabled */\n  disabled?: boolean;\n  /** Whether the combobox has an error */\n  error?: boolean;\n  /** Placeholder text for the search input */\n  searchPlaceholder?: string;\n  /** Optional CSS class for styling the combobox */\n  className?: string;\n  /** Callback fired when an item is selected */\n  onSelect: (item: T) => void;\n}\n\nexport default function Combobox<T extends PersistableEntity>(props: Props<T>) {\n  const {\n    options = defaultOptions as unknown as T[],\n    dataKey = \"name\" as keyof T,\n    value = \"1\",\n    defaultValue = \"1\",\n    disabled,\n    searchPlaceholder = \"Search here...\",\n    error,\n    className,\n    onSelect,\n  } = props;\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState(\"\");\n\n  function getItemName() {\n    const element = options?.find((item) => item.id === value);\n    return element ? String(element[dataKey]) : \"-\";\n  }\n\n  const filteredOptions = useMemo(() => {\n    if (!options || options.length === 0) return [];\n    if (!query || query.length === 0) return options;\n\n    return options?.filter((item) => {\n      return String(item[dataKey]).toLowerCase().includes(query.toLowerCase());\n    });\n  }, [query]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          disabled={disabled}\n          className={cn(\n            \"h-9 w-[240px] min-w-[120px] max-w-full justify-between border bg-background py-0 text-sm font-normal text-muted-foreground disabled:cursor-not-allowed disabled:opacity-100\",\n            className,\n            value && \"font-semibold text-foreground\",\n            error && \"border-destructive\",\n            disabled && \"text-muted-foreground/50\"\n          )}\n        >\n          {getItemName()}\n          <ChevronsUpDown className=\"opacity-50\" size={12} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className={cn(\"min-w-[40dvh] max-w-[80dvh] p-0\")}>\n        <Command>\n          <CommandInput\n            placeholder={searchPlaceholder}\n            onValueChange={(value) => setQuery(value)}\n          />\n          {filteredOptions.length > 0 ? (\n            <CommandList>\n              <CommandGroup>\n                {filteredOptions.map((item) => (\n                  <CommandItem\n                    key={item.id}\n                    onSelect={() => {\n                      console.log(item);\n                      onSelect;\n                      setOpen(false);\n                    }}\n                  >\n                    {String(item[dataKey])}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          ) : (\n            <CommandEmpty className=\"flex flex-col text-muted-foreground p-6 items-center justify-center text-sm\">\n              <p className=\"font-semibold\">No results found</p>\n              <p>Please try a different search or check your spelling</p>\n            </CommandEmpty>\n          )}\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:block",
      "target": "components/area/block/combobox.tsx"
    }
  ]
}